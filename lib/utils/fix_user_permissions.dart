// lib/utils/fix_user_permissions.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class FixUserPermissions {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  // static final FirebaseAuth _auth = FirebaseAuth.instance; // Unused field removed

  /// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ heargofza1133@gmail.com ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Seller
  static Future<Map<String, dynamic>> fixHeargofzaPermissions() async {
    final email = 'heargofza1133@gmail.com';
    final results = <String, dynamic>{};

    try {
      print('üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: $email');

      // ‡∏´‡∏≤ UID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      String? userId;

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å users collection
      final usersQuery = await _firestore
          .collection('users')
          .where('email', isEqualTo: email)
          .limit(1)
          .get();

      if (usersQuery.docs.isNotEmpty) {
        userId = usersQuery.docs.first.id;
        print('‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: $userId');
      } else {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: $email');
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô users collection
      await _firestore.collection('users').doc(userId).update({
        'isAdmin': false, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin
        'isSeller': true, // ‡πÄ‡∏õ‡πá‡∏ô seller
        'updatedAt': Timestamp.now(),
      });
      results['users_updated'] = true;
      print('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï users collection ‡πÅ‡∏•‡πâ‡∏ß');

      // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å admins collection (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      try {
        final adminDoc =
            await _firestore.collection('admins').doc(userId).get();
        if (adminDoc.exists) {
          await _firestore.collection('admins').doc(userId).delete();
          results['admin_removed'] = true;
          print('‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å admins collection ‡πÅ‡∏•‡πâ‡∏ß');
        } else {
          results['admin_removed'] = false;
          print('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô admins collection');
        }
      } catch (e) {
        print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏à‡∏≤‡∏Å admins collection: $e');
        results['admin_remove_error'] = e.toString();
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ô sellers collection ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final sellerDoc =
          await _firestore.collection('sellers').doc(userId).get();
      if (!sellerDoc.exists) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• seller ‡πÉ‡∏´‡∏°‡πà
        await _firestore.collection('sellers').doc(userId).set({
          'id': userId,
          'shopName': 'Green Shop - $email',
          'contactEmail': email,
          'phoneNumber': '081-234-5678',
          'status': 'active',
          'rating': 4.5,
          'totalRatings': 0,
          'shopDescription': '‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°',
          'createdAt': Timestamp.now(),
          'updatedAt': Timestamp.now(),
        });
        results['seller_created'] = true;
        print('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• seller ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß');
      } else {
        results['seller_exists'] = true;
        print('‚ÑπÔ∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• seller ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      }

      results['status'] = 'SUCCESS';
      results['message'] =
          '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Seller ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô';
      results['user_id'] = userId;
      results['email'] = email;
    } catch (e) {
      results['status'] = 'ERROR';
      results['error'] = e.toString();
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
    }

    return results;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static Future<Map<String, dynamic>> checkUserPermissions(String email) async {
    final results = <String, dynamic>{};

    try {
      // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      final usersQuery = await _firestore
          .collection('users')
          .where('email', isEqualTo: email)
          .limit(1)
          .get();

      if (usersQuery.docs.isEmpty) {
        results['user_found'] = false;
        results['message'] = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: $email';
        return results;
      }

      final userDoc = usersQuery.docs.first;
      final userId = userDoc.id;
      final userData = userDoc.data();

      results['user_found'] = true;
      results['user_id'] = userId;
      results['email'] = userData['email'];
      results['is_admin'] = userData['isAdmin'] ?? false;
      results['is_seller'] = userData['isSeller'] ?? false;
      results['is_suspended'] = userData['isSuspended'] ?? false;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô admins collection
      final adminDoc = await _firestore.collection('admins').doc(userId).get();
      results['in_admins_collection'] = adminDoc.exists;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô sellers collection
      final sellerDoc =
          await _firestore.collection('sellers').doc(userId).get();
      results['in_sellers_collection'] = sellerDoc.exists;

      if (sellerDoc.exists) {
        final sellerData = sellerDoc.data()!;
        results['shop_name'] = sellerData['shopName'];
        results['seller_status'] = sellerData['status'];
      }

      results['status'] = 'SUCCESS';
    } catch (e) {
      results['status'] = 'ERROR';
      results['error'] = e.toString();
    }

    return results;
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static Future<String> generatePermissionsReport(String email) async {
    final results = await checkUserPermissions(email);
    final buffer = StringBuffer();

    buffer.writeln('üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    buffer.writeln('=' * 40);
    buffer.writeln('üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: $email');

    if (results['user_found'] == true) {
      buffer.writeln('üÜî User ID: ${results['user_id']}');
      buffer.writeln('üîë Admin: ${results['is_admin'] ? "‚úÖ ‡πÉ‡∏ä‡πà" : "‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}');
      buffer
          .writeln('üè™ Seller: ${results['is_seller'] ? "‚úÖ ‡πÉ‡∏ä‡πà" : "‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}');
      buffer.writeln(
          '‚õî Suspended: ${results['is_suspended'] ? "‚úÖ ‡πÉ‡∏ä‡πà" : "‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}');
      buffer.writeln();
      buffer.writeln('üì¶ Collections:');
      buffer.writeln(
          '  üëë In Admins: ${results['in_admins_collection'] ? "‚úÖ ‡πÉ‡∏ä‡πà" : "‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}');
      buffer.writeln(
          '  üè™ In Sellers: ${results['in_sellers_collection'] ? "‚úÖ ‡πÉ‡∏ä‡πà" : "‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}');

      if (results['shop_name'] != null) {
        buffer.writeln('  üè¨ Shop Name: ${results['shop_name']}');
        buffer.writeln('  üìä Seller Status: ${results['seller_status']}');
      }
    } else {
      buffer.writeln('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }

    return buffer.toString();
  }
}
