// lib/utils/constants.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AppColors {
  // Peacock Green / Teal Tones
  static const Color primaryTeal = Color(0xFF008080); // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏≤‡∏á‡∏ô‡∏Å‡∏¢‡∏π‡∏á‡∏´‡∏•‡∏±‡∏Å
  static const Color lightTeal =
      Color(0xFF4DB6AC); // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏≤‡∏á‡∏ô‡∏Å‡∏¢‡∏π‡∏á‡∏≠‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Accent)
  static const Color veryLightTeal = Color(
      0xFFB2DFDB); // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏≤‡∏á‡∏ô‡∏Å‡∏¢‡∏π‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡∏≠‡∏á)

  // Modern Grey Tones
  static const Color modernGrey = Color(0xFF757575); // ‡πÄ‡∏ó‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô
  static const Color lightModernGrey = Color(0xFFBDBDBD); // ‡πÄ‡∏ó‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô‡∏≠‡πà‡∏≠‡∏ô

  // Earthy Accent Tones
  static const Color earthyBrown = Color(0xFFA1887F); // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏≠‡∏¥‡∏£‡πå‡∏ò‡πÇ‡∏ó‡∏ô‡∏≠‡πà‡∏≠‡∏ô
  static const Color lightEarthyBeige = Color(0xFFD7CCC8); // ‡∏™‡∏µ‡πÄ‡∏ö‡∏à‡πÄ‡∏≠‡∏¥‡∏£‡πå‡∏ò‡πÇ‡∏ó‡∏ô

  static const Color white = Colors.white;
  static const Color offWhite = Color(0xFFFAFAFA); // ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏ô‡∏ß‡∏•
  static const Color black = Colors.black;
  static const Color errorRed = Color(0xFFE57373); // ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Error
  static const Color warningYellow = Colors.amber;
  static const Color successGreen =
      Color(0xFF81C784); // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Success (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ lightTeal ‡πÅ‡∏ó‡∏ô‡πÑ‡∏î‡πâ)

  // Legacy (can be phased out or mapped to new theme)
  static const Color primaryGreen =
      primaryTeal; // Map old primaryGreen to new primaryTeal
  static const Color accentGreen =
      lightTeal; // Map old accentGreen to new lightTeal

  // Additional legacy colors needed by the app
  static const Color primaryDarkGreen = Color(0xFF00695C); // Darker Teal
  static const Color modernDarkGrey = Color(0xFF424242);
  static const Color warningOrange = Colors.orangeAccent;
  static const Color lightGrey =
      lightModernGrey; // Map old lightGrey to new lightModernGrey
  static const Color darkGrey =
      modernGrey; // Map old darkGrey to new modernGrey
  static const Color lightBeige =
      veryLightTeal; // Map old lightBeige to new veryLightTeal
  static const Color background = offWhite; // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏Å
}

// Professional 5-level Eco Rating System
enum EcoLevel {
  basic, // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (0-19%)
  standard, // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (20-39%)
  premium, // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° (40-59%)
  hero, // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Æ‡∏µ‡πÇ‡∏£‡πà (60-79%)
  platinum // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏û‡∏•‡∏ï‡∏ï‡∏¥‡∏ô‡∏±‡πà‡∏°‡∏Æ‡∏µ‡πÇ‡∏£‡πà (80-100%)
}

extension EcoLevelExtension on EcoLevel {
  String get name {
    switch (this) {
      case EcoLevel.basic:
        return '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô';
      case EcoLevel.standard:
        return '‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô';
      case EcoLevel.premium:
        return '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°';
      case EcoLevel.hero:
        return '‡∏Æ‡∏µ‡πÇ‡∏£‡πà';
      case EcoLevel.platinum:
        return '‡πÅ‡∏û‡∏•‡∏ï‡∏ï‡∏¥‡∏ô‡∏±‡πà‡∏°‡∏Æ‡∏µ‡πÇ‡∏£‡πà';
    }
  }

  String get fullName {
    switch (this) {
      case EcoLevel.basic:
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô';
      case EcoLevel.standard:
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô';
      case EcoLevel.premium:
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°';
      case EcoLevel.hero:
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Æ‡∏µ‡πÇ‡∏£‡πà';
      case EcoLevel.platinum:
        return '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏û‡∏•‡∏ï‡∏ï‡∏¥‡∏ô‡∏±‡πà‡∏°‡∏Æ‡∏µ‡πÇ‡∏£‡πà';
    }
  }

  String get shortCode {
    switch (this) {
      case EcoLevel.basic:
        return 'üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô';
      case EcoLevel.standard:
        return '‚≠ê ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô';
      case EcoLevel.premium:
        return 'üèÜ ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°';
      case EcoLevel.hero:
        return 'ÔøΩ ‡∏Æ‡∏µ‡πÇ‡∏£‡πà';
      case EcoLevel.platinum:
        return 'üíé ‡πÅ‡∏û‡∏•‡∏ï‡∏ï‡∏¥‡∏ô‡∏±‡πà‡∏°‡∏Æ‡∏µ‡πÇ‡∏£‡πà';
    }
  }

  String get description {
    switch (this) {
      case EcoLevel.basic:
        return '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û';
      case EcoLevel.standard:
        return '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏™‡πà‡πÉ‡∏à‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°';
      case EcoLevel.premium:
        return '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°';
      case EcoLevel.hero:
        return '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Æ‡∏µ‡πÇ‡∏£‡πà‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏•‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏ò‡∏£‡∏£‡∏°';
      case EcoLevel.platinum:
        return '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏û‡∏•‡∏ï‡∏ï‡∏¥‡∏ô‡∏±‡πà‡∏°‡∏Æ‡∏µ‡πÇ‡∏£‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô';
    }
  }

  String get marketingDescription {
    switch (this) {
      case EcoLevel.basic:
        return '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß';
      case EcoLevel.standard:
        return '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ';
      case EcoLevel.premium:
        return '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏•‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤';
      case EcoLevel.hero:
        return '‡πÄ‡∏õ‡πá‡∏ô‡∏Æ‡∏µ‡πÇ‡∏£‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏•‡∏Å ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      case EcoLevel.platinum:
        return '‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏¥‡∏® ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î';
    }
  }

  Color get color {
    switch (this) {
      case EcoLevel.basic:
        return const Color(0xFF4CAF50); // Green
      case EcoLevel.standard:
        return const Color(0xFF2196F3); // Blue
      case EcoLevel.premium:
        return const Color(0xFF9C27B0); // Purple
      case EcoLevel.hero:
        return const Color(0xFFFF9800); // Orange
      case EcoLevel.platinum:
        return const Color(0xFFFFD700); // Gold
    }
  }

  Color get backgroundColor {
    switch (this) {
      case EcoLevel.basic:
        return const Color(0xFFE8F5E8);
      case EcoLevel.standard:
        return const Color(0xFFE3F2FD);
      case EcoLevel.premium:
        return const Color(0xFFF3E5F5);
      case EcoLevel.hero:
        return const Color(0xFFFFF3E0);
      case EcoLevel.platinum:
        return const Color(0xFFFFFDE7);
    }
  }

  Color get gradientStart {
    switch (this) {
      case EcoLevel.basic:
        return const Color(0xFF66BB6A);
      case EcoLevel.standard:
        return const Color(0xFF42A5F5);
      case EcoLevel.premium:
        return const Color(0xFFAB47BC);
      case EcoLevel.hero:
        return const Color(0xFFFFB74D);
      case EcoLevel.platinum:
        return const Color(0xFFFFD54F);
    }
  }

  Color get gradientEnd {
    switch (this) {
      case EcoLevel.basic:
        return const Color(0xFF4CAF50);
      case EcoLevel.standard:
        return const Color(0xFF1976D2);
      case EcoLevel.premium:
        return const Color(0xFF7B1FA2);
      case EcoLevel.hero:
        return const Color(0xFFE65100);
      case EcoLevel.platinum:
        return const Color(0xFFFF8F00);
    }
  }

  IconData get icon {
    switch (this) {
      case EcoLevel.basic:
        return Icons.eco_outlined;
      case EcoLevel.standard:
        return Icons.verified_outlined;
      case EcoLevel.premium:
        return Icons.star_border;
      case EcoLevel.hero:
        return Icons.shield_outlined;
      case EcoLevel.platinum:
        return Icons.diamond_outlined;
    }
  }

  // Map eco score (0-100) to eco level
  static EcoLevel fromScore(int score) {
    if (score < 20) return EcoLevel.basic;
    if (score < 40) return EcoLevel.standard;
    if (score < 60) return EcoLevel.premium;
    if (score < 80) return EcoLevel.hero;
    return EcoLevel.platinum;
  }

  // Get percentage range for display
  String get scoreRange {
    switch (this) {
      case EcoLevel.basic:
        return '0-19%';
      case EcoLevel.standard:
        return '20-39%';
      case EcoLevel.premium:
        return '40-59%';
      case EcoLevel.hero:
        return '60-79%';
      case EcoLevel.platinum:
        return '80-100%';
    }
  }

  // Get priority for sorting (higher number = higher priority)
  int get priority {
    switch (this) {
      case EcoLevel.basic:
        return 1;
      case EcoLevel.standard:
        return 2;
      case EcoLevel.premium:
        return 3;
      case EcoLevel.hero:
        return 4;
      case EcoLevel.platinum:
        return 5;
    }
  }
}

class AppConstants {
  static const String appName = 'Green Market';
  static const String appVersion = '1.0.0';

  // API Configuration
  static const String baseUrl = 'https://api.greenmarket.com';
  static const Duration apiTimeout = Duration(seconds: 30);

  // Pagination
  static const int defaultPageSize = 20;
  static const int maxPageSize = 100;

  // Cache
  static const Duration cacheTimeout = Duration(hours: 1);

  // Images
  static const double maxImageSize = 5 * 1024 * 1024; // 5MB
  static const List<String> allowedImageTypes = ['jpg', 'jpeg', 'png', 'webp'];

  // Validation
  static const int minPasswordLength = 8;
  static const int maxProductNameLength = 100;
  static const int maxDescriptionLength = 1000;
}

// Theme constants
class AppTheme {
  static const double borderRadius = 12.0;
  static const double cardElevation = 4.0;
  static const double padding = 16.0;
  static const double smallPadding = 8.0;
  static const double largePadding = 24.0;

  // Font sizes
  static const double headingFontSize = 24.0;
  static const double titleFontSize = 20.0;
  static const double bodyFontSize = 16.0;
  static const double captionFontSize = 14.0;
  static const double smallFontSize = 12.0;
}

// Product listing constants
class ProductConstants {
  static const List<String> categories = [
    '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
    '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô',
    '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
    '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°',
    '‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå',
    '‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏≤‡∏£',
    '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    '‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏°',
    '‡∏™‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡∏ä‡∏ú‡∏•',
    '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
  ];

  static const List<String> conditions = [
    '‡πÉ‡∏´‡∏°‡πà',
    '‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà',
    '‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏µ',
    '‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πà‡∏≠‡∏°',
  ];

  static const Map<String, IconData> categoryIcons = {
    '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°': Icons.restaurant,
    '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô': Icons.checkroom,
    '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô': Icons.home,
    '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°': Icons.spa,
    '‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå': Icons.devices,
    '‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏≤‡∏£': Icons.sports,
    '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô': Icons.book,
    '‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏°': Icons.toys,
    '‡∏™‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡∏ä‡∏ú‡∏•': Icons.local_florist,
    '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': Icons.category,
  };
}

// Status constants
enum OrderStatus {
  pending,
  confirmed,
  preparing,
  shipped,
  delivered,
  cancelled,
  returned
}

extension OrderStatusExtension on OrderStatus {
  String get displayName {
    switch (this) {
      case OrderStatus.pending:
        return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô';
      case OrderStatus.confirmed:
        return '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
      case OrderStatus.preparing:
        return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°';
      case OrderStatus.shipped:
        return '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
      case OrderStatus.delivered:
        return '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
      case OrderStatus.cancelled:
        return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
      case OrderStatus.returned:
        return '‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
    }
  }

  Color get color {
    switch (this) {
      case OrderStatus.pending:
        return Colors.orange;
      case OrderStatus.confirmed:
        return Colors.blue;
      case OrderStatus.preparing:
        return Colors.indigo;
      case OrderStatus.shipped:
        return Colors.purple;
      case OrderStatus.delivered:
        return Colors.green;
      case OrderStatus.cancelled:
        return Colors.red;
      case OrderStatus.returned:
        return Colors.grey;
    }
  }
}

// Investment project level constants
class InvestmentLevel {
  static const List<Map<String, dynamic>> levels = [
    {
      'name': 'Beginner',
      'minAmount': 1000,
      'maxAmount': 50000,
      'color': AppColors.primaryTeal,
      'icon': Icons.eco_outlined,
      'description': '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°',
    },
    {
      'name': 'Intermediate',
      'minAmount': 50001,
      'maxAmount': 200000,
      'color': AppColors.primaryTeal,
      'icon': Icons.eco,
      'description': '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
    },
    {
      'name': 'Advanced',
      'minAmount': 200001,
      'maxAmount': 1000000,
      'color': AppColors.primaryTeal,
      'icon': Icons.emoji_events,
      'description': '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏™‡∏π‡∏á',
    },
  ];
}

// App Text Styles
class AppTextStyles {
  // Consider defining a base font family for the app in main.dart Theme
  // static const String baseFontFamily = 'Nunito'; // Example

  static const TextStyle title = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.bold,
    // fontFamily: baseFontFamily,
    color: AppColors.primaryTeal, // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
  );
  static const TextStyle headline = TextStyle(
    fontSize: 26,
    fontWeight: FontWeight.bold,
    // fontFamily: baseFontFamily,
    color: AppColors.primaryTeal,
  );
  static const TextStyle subtitle = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    // fontFamily: baseFontFamily,
    color: AppColors.modernGrey,
  );
  static final TextStyle subtitleBold = subtitle.copyWith(
      fontWeight: FontWeight.bold, color: AppColors.primaryDarkGreen);

  static const TextStyle body = TextStyle(
    fontSize: 16,
    /*fontFamily: baseFontFamily,*/ color: AppColors.modernGrey,
  );
  static final TextStyle bodySmall = body.copyWith(fontSize: 14);

  static const TextStyle price = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.bold,
    // fontFamily: baseFontFamily,
    color: AppColors.primaryTeal,
  );

  static const TextStyle link = TextStyle(
    fontSize: 16,
    // fontFamily: baseFontFamily,
    color: AppColors.lightTeal, // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå
    decoration: TextDecoration.underline,
  );

  static const TextStyle bodyBold = TextStyle(
      fontSize: 16,
      // fontFamily: baseFontFamily,
      color: AppColors.modernGrey, // Changed from darkGrey
      fontWeight: FontWeight.bold);
  static const TextStyle caption = TextStyle(
      fontSize: 12,
      /*fontFamily: baseFontFamily,*/ color: AppColors.modernGrey);
  static final TextStyle captionBold =
      caption.copyWith(fontWeight: FontWeight.bold);

  static final TextStyle bodyGreen =
      body.copyWith(color: AppColors.successGreen);

  static final TextStyle bodyYellow =
      body.copyWith(color: AppColors.warningYellow);

  static final TextStyle bodyRed = body.copyWith(color: AppColors.errorRed);

  static const TextStyle button = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
    // fontFamily: baseFontFamily,
    color: AppColors.white, // Default button text color
  );
}

// Risk Level for investment projects
enum RiskLevel {
  low,
  medium,
  high,
}

extension RiskLevelExtension on RiskLevel {
  String get displayName {
    switch (this) {
      case RiskLevel.low:
        return '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥';
      case RiskLevel.medium:
        return '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
      case RiskLevel.high:
        return '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á';
    }
  }

  Color get color {
    switch (this) {
      case RiskLevel.low:
        return Colors.green;
      case RiskLevel.medium:
        return Colors.orange;
      case RiskLevel.high:
        return Colors.red;
    }
  }
}

// Admin Configuration
const String kAdminEmail =
    'admin@greenmarket.com'; // Add email here to manage admin

// Eco Coins System Configuration
class EcoCoinsConfig {
  // Coin earning rates
  static const int coinsPerPurchase = 10; // ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ 100 ‡∏ö‡∏≤‡∏ó
  static const int coinsPer100Baht = 10;
  static const int coinsForReview = 5; // ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
  static const int coinsForEcoProduct =
      20; // ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
  static const int dailyLoginCoins = 2; // ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  static const int weeklyLoginBonus = 15; // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö 7 ‡∏ß‡∏±‡∏ô

  // Special eco activities coins
  static const int coinsForRecycling = 30; // ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•
  static const int coinsForCarbonOffset = 50; // ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô
  static const int coinsForTreePlanting = 100; // ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ

  // Redemption rates
  static const int coinsToDiscount1Baht = 10; // 10 ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç = ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 1 ‡∏ö‡∏≤‡∏ó
  static const int minCoinsForRedemption = 100; // ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏Å
  static const int maxDiscountPercent = 50; // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 50%

  // Level system
  static const List<EcoCoinTier> tiers = [
    EcoCoinTier(
      name: 'Green Starter',
      minCoins: 0,
      maxCoins: 999,
      multiplier: 1.0,
      color: Colors.green,
      icon: Icons.eco_outlined,
      benefits: ['‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô', '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 5%'],
    ),
    EcoCoinTier(
      name: 'Eco Warrior',
      minCoins: 1000,
      maxCoins: 4999,
      multiplier: 1.2,
      color: Colors.teal,
      icon: Icons.eco,
      benefits: ['‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡πÄ‡∏û‡∏¥‡πà‡∏° 20%', '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 10%', '‡∏ü‡∏£‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'],
    ),
    EcoCoinTier(
      name: 'Planet Protector',
      minCoins: 5000,
      maxCoins: 19999,
      multiplier: 1.5,
      color: Colors.amber,
      icon: Icons.star,
      benefits: [
        '‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡πÄ‡∏û‡∏¥‡πà‡∏° 50%',
        '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 15%',
        '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©',
        '‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'
      ],
    ),
    EcoCoinTier(
      name: 'Earth Guardian',
      minCoins: 20000,
      maxCoins: 999999,
      multiplier: 2.0,
      color: Colors.purple,
      icon: Icons.emoji_events,
      benefits: [
        '‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡πÄ‡∏û‡∏¥‡πà‡∏° 100%',
        '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 25%',
        '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ VIP'
      ],
    ),
  ];
}

// Eco Coin Tier Model
class EcoCoinTier {
  final String name;
  final int minCoins;
  final int maxCoins;
  final double multiplier;
  final Color color;
  final IconData icon;
  final List<String> benefits;

  const EcoCoinTier({
    required this.name,
    required this.minCoins,
    required this.maxCoins,
    required this.multiplier,
    required this.color,
    required this.icon,
    required this.benefits,
  });

  // Check if user coins fall within this tier
  bool isInTier(int userCoins) {
    return userCoins >= minCoins && userCoins <= maxCoins;
  }

  // Get next tier
  static EcoCoinTier? getNextTier(int currentCoins) {
    for (var tier in EcoCoinsConfig.tiers) {
      if (currentCoins < tier.minCoins) {
        return tier;
      }
    }
    return null; // Already at highest tier
  }

  // Get current tier
  static EcoCoinTier getCurrentTier(int userCoins) {
    for (var tier in EcoCoinsConfig.tiers.reversed) {
      if (tier.isInTier(userCoins)) {
        return tier;
      }
    }
    return EcoCoinsConfig.tiers.first; // Default to first tier
  }
}

// Eco Coins Transaction Types
enum EcoCoinTransactionType {
  earned,
  spent,
  expired,
  bonus,
}

extension EcoCoinTransactionTypeExtension on EcoCoinTransactionType {
  String get displayName {
    switch (this) {
      case EcoCoinTransactionType.earned:
        return '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç';
      case EcoCoinTransactionType.spent:
        return '‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç';
      case EcoCoinTransactionType.expired:
        return '‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏';
      case EcoCoinTransactionType.bonus:
        return '‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏´‡∏•‡∏µ‡∏¢‡∏ç';
    }
  }

  Color get color {
    switch (this) {
      case EcoCoinTransactionType.earned:
        return Colors.green;
      case EcoCoinTransactionType.spent:
        return Colors.orange;
      case EcoCoinTransactionType.expired:
        return Colors.red;
      case EcoCoinTransactionType.bonus:
        return Colors.purple;
    }
  }

  IconData get icon {
    switch (this) {
      case EcoCoinTransactionType.earned:
        return Icons.add_circle;
      case EcoCoinTransactionType.spent:
        return Icons.remove_circle;
      case EcoCoinTransactionType.expired:
        return Icons.schedule;
      case EcoCoinTransactionType.bonus:
        return Icons.card_giftcard;
    }
  }
}
