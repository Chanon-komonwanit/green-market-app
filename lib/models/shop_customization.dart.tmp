// lib/models/shop_customization.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class ShopCustomization {
  final String sellerId;
  final ScreenShopTheme theme;
  final ShopBanner? banner;
  final List<ShopSection> sections;
  final ShopColors colors;
  final ShopLayout layout;
  final List<String> featuredProductIds;
  final List<ShopPromotion> promotions;
  final Timestamp? updatedAt;
  final Timestamp? createdAt;

  ShopCustomization({
    required this.sellerId,
    required this.theme,
    this.banner,
    required this.sections,
    required this.colors,
    required this.layout,
    required this.featuredProductIds,
    required this.promotions,
    this.updatedAt,
    this.createdAt,
  });

  factory ShopCustomization.fromMap(Map<String, dynamic> map) {
    return ShopCustomization(
      sellerId: map['sellerId'] ?? '',
      theme: ScreenShopTheme.values.firstWhere(
        (e) => e.toString().split('.').last == map['theme'],
        orElse: () => ScreenShopTheme.greenEco,
      ),
      banner: map['banner'] != null ? ShopBanner.fromMap(map['banner']) : null,
      sections: List<ShopSection>.from(
        map['sections']?.map((x) => ShopSection.fromMap(x)) ?? [],
      ),
      colors: ShopColors.fromMap(map['colors'] ?? {}),
      layout: ShopLayout.fromMap(map['layout'] ?? {}),
      featuredProductIds: List<String>.from(map['featuredProductIds'] ?? []),
      promotions: List<ShopPromotion>.from(
        map['promotions']?.map((x) => ShopPromotion.fromMap(x)) ?? [],
      ),
      updatedAt: map['updatedAt'] is Timestamp ? map['updatedAt'] : null,
      createdAt: map['createdAt'] is Timestamp ? map['createdAt'] : null,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'sellerId': sellerId,
      'theme': theme.toString().split('.').last,
      'banner': banner?.toMap(),
      'sections': sections.map((x) => x.toMap()).toList(),
      'colors': colors.toMap(),
      'layout': layout.toMap(),
      'featuredProductIds': featuredProductIds,
      'promotions': promotions.map((x) => x.toMap()).toList(),
      'updatedAt': updatedAt ?? FieldValue.serverTimestamp(),
      'createdAt': createdAt ?? FieldValue.serverTimestamp(),
    };
  }

  ShopCustomization copyWith({
    String? sellerId,
    ScreenShopTheme? theme,
    ShopBanner? banner,
    List<ShopSection>? sections,
    ShopColors? colors,
    ShopLayout? layout,
    List<String>? featuredProductIds,
    List<ShopPromotion>? promotions,
    Timestamp? updatedAt,
    Timestamp? createdAt,
  }) {
    return ShopCustomization(
      sellerId: sellerId ?? this.sellerId,
      theme: theme ?? this.theme,
      banner: banner ?? this.banner,
      sections: sections ?? this.sections,
      colors: colors ?? this.colors,
      layout: layout ?? this.layout,
      featuredProductIds: featuredProductIds ?? this.featuredProductIds,
      promotions: promotions ?? this.promotions,
      updatedAt: updatedAt ?? this.updatedAt,
      createdAt: createdAt ?? this.createdAt,
    );
  }
}

enum ScreenShopTheme {
  // ธีมสำเร็จรูปแบบ Green Market
  shopeeClassic, // ตลาดเขียวคลาสสิก
  fashionBoutique, // แฟชั่นยั่งยืน
  techStore, // เทคโนโลยีสีเขียว
  beautyCosmetic, // ความงามธรรมชาติ
  foodDelivery, // อาหารออร์แกนิก
  sportsOutdoor, // กีฬาเพื่อสุขภาพ
  homeDecor, // บ้านเป็นมิตรสิ่งแวดล้อม
  kidsFamily, // ครอบครัวสีเขียว
  luxuryBrand, // หรูหราแบบยั่งยืน
  naturalOrganic, // ออร์แกนิกแท้ 100%
  vintageRetro, // รีไซเคิลวินเทจ
  minimalistClean, // มินิมอลเรียบง่าย

  // ธีมเก่าที่เก็บไว้เพื่อ backward compatibility
  greenEco,
  modernLuxury,
  minimalist,
  techDigital,
  warmVintage,
  vibrantYouth,
  shopeeOrange,
  lazadaBlue,
  elegantGold,
  freshMint,
}

extension ScreenShopThemeExtension on ScreenShopTheme {
  String get name {
    switch (this) {
      // ธีมสำเร็จรูปใหม่
      case ScreenShopTheme.shopeeClassic:
        return 'ตลาดเขียวคลาสสิก';
      case ScreenShopTheme.fashionBoutique:
        return 'แฟชั่นยั่งยืน';
      case ScreenShopTheme.techStore:
        return 'เทคโนโลยีสีเขียว';
      case ScreenShopTheme.beautyCosmetic:
        return 'ความงามธรรมชาติ';
      case ScreenShopTheme.foodDelivery:
        return 'อาหารออร์แกนิก';
      case ScreenShopTheme.sportsOutdoor:
        return 'กีฬาเพื่อธรรมชาติ';
      case ScreenShopTheme.homeDecor:
        return 'บ้านเพื่อสิ่งแวดล้อม';
      case ScreenShopTheme.kidsFamily:
        return 'ครอบครัวสีเขียว';
      case ScreenShopTheme.luxuryBrand:
        return 'หรูหราแบบยั่งยืน';
      case ScreenShopTheme.naturalOrganic:
        return 'ออร์แกนิกแท้ 100%';
      case ScreenShopTheme.vintageRetro:
        return 'รีไซเคิลวินเทจ';
      case ScreenShopTheme.minimalistClean:
        return 'มินิมอลเรียบง่าย';

      // ธีมเก่า
      case ScreenShopTheme.greenEco:
        return 'Green Eco';
      case ScreenShopTheme.modernLuxury:
        return 'Modern Luxury';
      case ScreenShopTheme.minimalist:
        return 'Minimalist';
      case ScreenShopTheme.techDigital:
        return 'Tech Digital';
      case ScreenShopTheme.warmVintage:
        return 'Warm Vintage';
      case ScreenShopTheme.vibrantYouth:
        return 'Vibrant Youth';
      case ScreenShopTheme.shopeeOrange:
        return 'Shopee Style';
      case ScreenShopTheme.lazadaBlue:
        return 'Lazada Style';
      case ScreenShopTheme.elegantGold:
        return 'Elegant Gold';
      case ScreenShopTheme.freshMint:
        return 'Fresh Mint';
    }
  }

  // ไอคอนตามธีม
  IconData get icon {
    switch (this) {
      case ScreenShopTheme.shopeeClassic:
        return Icons.eco;
      case ScreenShopTheme.fashionBoutique:
        return Icons.checkroom;
      case ScreenShopTheme.techStore:
        return Icons.devices;
      case ScreenShopTheme.beautyCosmetic:
        return Icons.face;
      case ScreenShopTheme.foodDelivery:
        return Icons.restaurant;
      case ScreenShopTheme.sportsOutdoor:
        return Icons.fitness_center;
      case ScreenShopTheme.homeDecor:
        return Icons.home;
      case ScreenShopTheme.kidsFamily:
        return Icons.family_restroom;
      case ScreenShopTheme.luxuryBrand:
        return Icons.diamond;
      case ScreenShopTheme.naturalOrganic:
        return Icons.local_florist;
      case ScreenShopTheme.vintageRetro:
        return Icons.history;
      case ScreenShopTheme.minimalistClean:
        return Icons.tune;
      default:
        return Icons.store;
    }
  }

  String get description {
    switch (this) {
      // ธีมสำเร็จรูปใหม่
      case ScreenShopTheme.shopeeClassic:
        return 'ธีมสีเขียวคลาสสิก เหมาะกับตลาดสีเขียวทุกประเภท';
      case ScreenShopTheme.fashionBoutique:
        return 'แฟชั่นเป็นมิตรกับสิ่งแวดล้อม เสื้อผ้าจากวัสดุรีไซเคิล';
      case ScreenShopTheme.techStore:
        return 'เทคโนโลยีประหยัดพลังงาน อุปกรณ์เพื่อชีวิตยั่งยืน';
      case ScreenShopTheme.beautyCosmetic:
        return 'เครื่องสำอางธรรมชาติ ปลอดสารเคมี รักษ์ผิวรักษ์โลก';
      case ScreenShopTheme.foodDelivery:
        return 'อาหารออร์แกนิก ปลอดสารพิษ สดจากฟาร์ม';
      case ScreenShopTheme.sportsOutdoor:
        return 'อุปกรณ์กีฬาและกิจกรรมกลางแจ้ง เพื่อสุขภาพแข็งแรง';
      case ScreenShopTheme.homeDecor:
        return 'ของตกแต่งบ้าน วัสดุธรรมชาติ รักษ์สิ่งแวดล้อม';
      case ScreenShopTheme.kidsFamily:
        return 'สินค้าแม่และเด็ก ปลอดภัย ไร้สารเคมี';
      case ScreenShopTheme.luxuryBrand:
        return 'ไลฟ์สไตล์หรูหรา คุณภาพระดับพรีเมียม';
      case ScreenShopTheme.naturalOrganic:
        return 'สินค้าออร์แกนิกแท้ 100% ได้รับการรับรองมาตรฐาน';
      case ScreenShopTheme.vintageRetro:
        return 'ของใช้วินเทจ รีไซเคิลใหม่ ลดขยะเพื่อโลก';
      case ScreenShopTheme.minimalistClean:
        return 'ธีมเรียบง่าย ลดการบริโภค เพื่อสิ่งแวดล้อม';
        return 'ธีมมินิมอล สีขาวสะอาด เหมาะกับทุกประเภท';

      // ธีมเก่า
      case ScreenShopTheme.greenEco:
        return 'ธีมเน้นธรรมชาติและความยั่งยืน';
      case ScreenShopTheme.modernLuxury:
        return 'ธีมหรูหราและทันสมัย';
      case ScreenShopTheme.minimalist:
        return 'ธีมเรียบง่ายและสะอาดตา';
      case ScreenShopTheme.techDigital:
        return 'ธีมเทคโนโลยีและดิจิทัล';
      case ScreenShopTheme.warmVintage:
        return 'ธีมอบอุ่นและคลาสสิก';
      case ScreenShopTheme.vibrantYouth:
        return 'ธีมสดใสและเยาวชน';
      case ScreenShopTheme.shopeeOrange:
        return 'ธีมส้มสดใส แบบ Shopee';
      case ScreenShopTheme.lazadaBlue:
        return 'ธีมน้ำเงินมั่นคง แบบ Lazada';
      case ScreenShopTheme.elegantGold:
        return 'ธีมทองสุดหรู เรียบหรู';
      case ScreenShopTheme.freshMint:
        return 'ธีมเขียวมิ้นต์ สดชื่น';
    }
  }

  Color get primaryColor {
    switch (this) {
      // ธีมสำเร็จรูปใหม่ - Green Market Style
      case ScreenShopTheme.shopeeClassic:
        return const Color(0xFFEE4D2D); // ส้ม Shopee คลาสสิค
      case ScreenShopTheme.fashionBoutique:
        return const Color(0xFFE91E63); // ชมพูแฟชั่น
      case ScreenShopTheme.techStore:
        return const Color(0xFF1565C0); // น้ำเงินเทค
      case ScreenShopTheme.beautyCosmetic:
        return const Color(0xFF9C27B0); // ม่วงความงาม
      case ScreenShopTheme.foodDelivery:
        return const Color(0xFFD32F2F); // แดงอาหาร
      case ScreenShopTheme.sportsOutdoor:
        return const Color(0xFF388E3C); // เขียวกีฬา
      case ScreenShopTheme.homeDecor:
        return const Color(0xFF5D4037); // น้ำตาลบ้าน
      case ScreenShopTheme.kidsFamily:
        return const Color(0xFFFFC107); // เหลืองเด็ก
      case ScreenShopTheme.luxuryBrand:
        return const Color(0xFF212121); // ดำหรูหรา
      case ScreenShopTheme.naturalOrganic:
        return const Color(0xFF2E7D32); // เขียวธรรมชาติ
      case ScreenShopTheme.vintageRetro:
        return const Color(0xFF8D6E63); // น้ำตาลวินเทจ
      case ScreenShopTheme.minimalistClean:
        return const Color(0xFF757575); // เทามินิมอล

      // ธีมเก่า
      case ScreenShopTheme.greenEco:
        return const Color(0xFF2E7D32);
      case ScreenShopTheme.modernLuxury:
        return const Color(0xFF1A1A1A);
      case ScreenShopTheme.minimalist:
        return const Color(0xFF424242);
      case ScreenShopTheme.techDigital:
        return const Color(0xFF0D47A1);
      case ScreenShopTheme.warmVintage:
        return const Color(0xFF8D6E63);
      case ScreenShopTheme.vibrantYouth:
        return const Color(0xFFE91E63);
      case ScreenShopTheme.shopeeOrange:
        return const Color(0xFFEE4D2D); // Shopee's signature orange
      case ScreenShopTheme.lazadaBlue:
        return const Color(0xFF0F136D); // Lazada's deep blue
      case ScreenShopTheme.elegantGold:
        return const Color(0xFFB8860B); // Dark gold
      case ScreenShopTheme.freshMint:
        return const Color(0xFF00A896); // Fresh mint green
    }
  }

  Color get secondaryColor {
    switch (this) {
      // ธีมสำเร็จรูปใหม่ - Green Market Style
      case ScreenShopTheme.shopeeClassic:
        return const Color(0xFFFFB74D); // ส้มอ่อน
      case ScreenShopTheme.fashionBoutique:
        return const Color(0xFFF8BBD9); // ชมพูอ่อน
      case ScreenShopTheme.techStore:
        return const Color(0xFF42A5F5); // น้ำเงินอ่อน
      case ScreenShopTheme.beautyCosmetic:
        return const Color(0xFFE1BEE7); // ม่วงอ่อน
      case ScreenShopTheme.foodDelivery:
        return const Color(0xFFEF9A9A); // แดงอ่อน
      case ScreenShopTheme.sportsOutdoor:
        return const Color(0xFF81C784); // เขียวอ่อน
      case ScreenShopTheme.homeDecor:
        return const Color(0xFFBCAAA4); // น้ำตาลอ่อน
      case ScreenShopTheme.kidsFamily:
        return const Color(0xFFFFF59D); // เหลืองอ่อน
      case ScreenShopTheme.luxuryBrand:
        return const Color(0xFFD4AF37); // ทองเข้ม
      case ScreenShopTheme.naturalOrganic:
        return const Color(0xFF66BB6A); // เขียวอ่อน
      case ScreenShopTheme.vintageRetro:
        return const Color(0xFFD7CCC8); // น้ำตาลอ่อน
      case ScreenShopTheme.minimalistClean:
        return const Color(0xFFE0E0E0); // เทาอ่อน

      // ธีมเก่า
      case ScreenShopTheme.greenEco:
        return const Color(0xFF66BB6A);
      case ScreenShopTheme.modernLuxury:
        return const Color(0xFFD4AF37);
      case ScreenShopTheme.minimalist:
        return const Color(0xFF9E9E9E);
      case ScreenShopTheme.techDigital:
        return const Color(0xFF1976D2);
      case ScreenShopTheme.warmVintage:
        return const Color(0xFFBCAAA4);
      case ScreenShopTheme.vibrantYouth:
        return const Color(0xFFFF4081);
      case ScreenShopTheme.shopeeOrange:
        return const Color(0xFFFFB74D); // Light orange complement
      case ScreenShopTheme.lazadaBlue:
        return const Color(0xFF3F51B5); // Medium blue
      case ScreenShopTheme.elegantGold:
        return const Color(0xFFFFD700); // Bright gold
      case ScreenShopTheme.freshMint:
        return const Color(0xFF4ECDC4); // Light mint
    }
  }
}

/// ธีมสำเร็จรูปแบบ Shopee Style สำหรับ Green Market
class ShopTemplate {
  final ScreenShopTheme theme;
  final String name;
  final String description;
  final ShopColors colors;
  final ShopLayout layout;
  final ShopBanner? defaultBanner;
  final List<String> defaultMessages;
  final String fontFamily;
  final Map<String, String> iconEmojis;
  final List<String> suggestedCategories;

  const ShopTemplate({
    required this.theme,
    required this.name,
    required this.description,
    required this.colors,
    required this.layout,
    this.defaultBanner,
    this.defaultMessages = const [],
    this.fontFamily = 'Sarabun',
    this.iconEmojis = const {},
    this.suggestedCategories = const [],
  });

  /// รับธีมสำเร็จรูปตาม ScreenShopTheme
  static ShopTemplate getTemplate(ScreenShopTheme theme) {
    switch (theme) {
      case ScreenShopTheme.shopeeClassic:
        return ShopTemplate(
          theme: theme,
          name: 'ตลาดเขียวคลาสสิก',
          description: 'ธีมสีเขียวคลาสสิก เหมาะกับตลาดสีเขียวทุกประเภท',
          colors: ShopColors(
            primary: '#2E7D32',
            secondary: '#66BB6A',
            accent: '#4CAF50',
            background: '#FFFFFF',
            surface: '#F8FFF8',
            text: '#1B5E20',
          ),
          layout: ShopLayout(
            gridColumns: 2,
            cardSpacing: 12.0,
            showPrices: true,
            showRatings: true,
            headerStyle: 'green_market',
          ),
          defaultBanner: ShopBanner(
            title: '🌱 ตลาดสีเขียว ยินดีต้อนรับ',
            subtitle: 'สินค้าเพื่อสิ่งแวดล้อม คุณภาพดี ราคาเป็นธรรม',
            buttonText: 'เลือกซื้อเลย',
            isVisible: true,
          ),
          defaultMessages: [
            'สวัสดีค่ะ มีสินค้าเป็นมิตรกับสิ่งแวดล้อมอะไรให้ช่วยไหมคะ? 🌿',
            'สินค้าของเราเป็นมิตรกับสิ่งแวดล้อม',
            'ร่วมกันสร้างโลกที่ยั่งยืน 🌍',
            'จัดส่งฟรี! บรรจุภัณฑ์รีไซเคิลได้ ♻️'
          ],
          iconEmojis: {
            'green': '🌱',
            'eco': '🌿',
            'earth': '🌍',
            'recycle': '♻️',
            'heart': '💚',
          },
          suggestedCategories: [
            'สินค้าเป็นมิตรสิ่งแวดล้อม',
            'ออร์แกนิก',
            'รีไซเคิล',
            'ประหยัดพลังงาน'
          ],
        );

      case ScreenShopTheme.fashionBoutique:
        return ShopTemplate(
          theme: theme,
          name: 'แฟชั่นยั่งยืน',
          description: 'แฟชั่นเป็นมิตรกับสิ่งแวดล้อม เสื้อผ้าจากวัสดุรีไซเคิล',
          colors: ShopColors(
            primary: '#E91E63',
            secondary: '#F8BBD9',
            accent: '#FF4081',
            background: '#FFFFFF',
            surface: '#FCF4F7',
            text: '#2C2C2C',
          ),
          layout: ShopLayout(
            gridColumns: 2,
            cardSpacing: 16.0,
            showPrices: true,
            showRatings: true,
            headerStyle: 'sustainable_fashion',
          ),
          defaultBanner: ShopBanner(
            title: '♻️ แฟชั่นยั่งยืน',
            subtitle: 'เสื้อผ้าจากผ้ารีไซเคิล สวยและรับผิดชอบต่อโลก',
            buttonText: 'ช้อปเลย',
            isVisible: true,
          ),
          defaultMessages: [
            'สวัสดีค่ะ สนใจแฟชั่นเพื่อสิ่งแวดล้อมไหมคะ? �♻️',
            'เสื้อผ้าจากผ้าออร์แกนิกและรีไซเคิล',
            'สวยใส ใส่สบาย ใส่ใจโลก 🌍',
            'มีไซส์ครบ S-XXL เพื่อทุกคน ✨'
          ],
          iconEmojis: {
            'fashion': '👗',
            'recycle': '♻️',
            'organic': '🌿',
            'earth': '�',
            'sparkle': '✨',
          },
          suggestedCategories: [
            'เสื้อผ้าออร์แกนิก',
            'แฟชั่นรีไซเคิล',
            'กระเป๋าเป็นมิตรสิ่งแวดล้อม',
            'รองเท้าธรรมชาติ'
          ],
        );

      case ScreenShopTheme.techStore:
        return ShopTemplate(
          theme: theme,
          name: 'เทคโนโลยีสีเขียว',
          description: 'เทคโนโลยีประหยัดพลังงาน อุปกรณ์เพื่อชีวิตยั่งยืน',
          colors: ShopColors(
            primary: '#1565C0',
            secondary: '#42A5F5',
            accent: '#0D47A1',
            background: '#FFFFFF',
            surface: '#F5F8FF',
            text: '#1A1A1A',
          ),
          layout: ShopLayout(
            gridColumns: 2,
            cardSpacing: 8.0,
            showPrices: true,
            showRatings: true,
            headerStyle: 'green_tech',
          ),
          defaultBanner: ShopBanner(
            title: '� เทคโนโลยีสีเขียว',
            subtitle: 'อุปกรณ์ประหยัดพลังงาน เพื่ออนาคตที่ยั่งยืน',
            buttonText: 'สำรวจ',
            isVisible: true,
          ),
          defaultMessages: [
            'สวัสดีครับ สนใจเทคโนโลยีเพื่อสิ่งแวดล้อมไหมครับ? �',
            'อุปกรณ์ประหยัดพลังงาน รับประกันคุณภาพ',
            'ลดค่าไฟ ลดโลกร้อน 🌍',
            'เทคโนโลยีล่าสุด เพื่อโลกสีเขียว ⚡'
          ],
          iconEmojis: {
            'battery': '�',
            'eco': '🌿',
            'energy': '⚡',
            'tech': '�',
            'earth': '🌍',
          },
          suggestedCategories: [
            'แผงโซลาร์เซลล์',
            'อุปกรณ์ประหยัดไฟ',
            'เทคโนโลยีสะอาด',
            'อิเล็กทรอนิกส์รีไซเคิล'
          ],
        );

      case ScreenShopTheme.beautyCosmetic:
        return ShopTemplate(
          theme: theme,
          name: 'ความงามธรรมชาติ',
          description: 'เครื่องสำอางธรรมชาติ ปลอดสารเคมี รักษ์ผิวรักษ์โลก',
          colors: ShopColors(
            primary: '#9C27B0',
            secondary: '#E1BEE7',
            accent: '#8E24AA',
            background: '#FFFFFF',
            surface: '#FAF8FB',
            text: '#2E2E2E',
          ),
          layout: ShopLayout(
            gridColumns: 3,
            cardSpacing: 12.0,
            showPrices: true,
            showRatings: true,
            headerStyle: 'natural_beauty',
          ),
          defaultBanner: ShopBanner(
            title: '🌿 ความงามธรรมชาติ',
            subtitle: 'เครื่องสำอางจากธรรมชาติ ปลอดสารเคมี',
            buttonText: 'ดูสินค้า',
            isVisible: true,
          ),
          defaultMessages: [
            'สวัสดีค่ะ สนใจเครื่องสำอางธรรมชาติไหมคะ? 🌿�',
            'ปลอดสารเคมี ปลอดภัยต่อผิว',
            'ผลิตจากสมุนไพรไทย 🌺',
            'งามโดยธรรมชาติ ใส่ใจสิ่งแวดล้อม ✨'
          ],
          iconEmojis: {
            'nature': '🌿',
            'beauty': '💄',
            'flower': '🌺',
            'safe': '�️',
            'sparkle': '✨',
          },
          suggestedCategories: [
            'เครื่องสำอางธรรมชาติ',
            'สมุนไพรดูแลผิว',
            'น้ำหอมธรรมชาติ',
            'อาหารเสริมเพื่อผิว'
          ],
        );

      case ScreenShopTheme.naturalOrganic:
        return ShopTemplate(
          theme: theme,
          name: 'ออร์แกนิกแท้ 100%',
          description: 'สินค้าออร์แกนิกแท้ 100% ได้รับการรับรองมาตรฐาน',
          colors: ShopColors(
            primary: '#2E7D32',
            secondary: '#66BB6A',
            accent: '#4CAF50',
            background: '#FFFFFF',
            surface: '#F8FFF8',
            text: '#1B5E20',
          ),
          layout: ShopLayout(
            gridColumns: 2,
            cardSpacing: 14.0,
            showPrices: true,
            showRatings: true,
            headerStyle: 'organic_certified',
          ),
          defaultBanner: ShopBanner(
            title: '🌱 ออร์แกนิกแท้ 100%',
            subtitle: 'จากธรรมชาติ เพื่อสุขภาพที่ดี',
            buttonText: 'สำรวจสินค้า',
            isVisible: true,
          ),
          defaultMessages: [
            'สวัสดีค่ะ สนใจสินค้าออร์แกนิกไหมคะ? 🌿',
            'ได้รับการรับรองออร์แกนิก 100%',
            'ปลอดสารเคมี ปลอดสารพิษ 🌱',
            'ดีต่อสุขภาพ ดีต่อสิ่งแวดล้อม 🌍'
          ],
          iconEmojis: {
            'organic': '🌱',
            'nature': '🌿',
            'health': '💚',
            'earth': '🌍',
            'certified': '✅',
          },
          suggestedCategories: [
            'อาหารออร์แกนิก',
            'ผลิตภัณฑ์ธรรมชาติ',
            'สมุนไพร',
            'ของใช้เพื่อสิ่งแวดล้อม'
          ],
        );

      // เพิ่มธีมอื่นๆ ตามต้องการ...
      default:
        return _getDefaultTemplate(theme);
    }
  }

  static ShopTemplate _getDefaultTemplate(ScreenShopTheme theme) {
    return ShopTemplate(
      theme: theme,
      name: theme.name,
      description: theme.description,
      colors: ShopColors(
        primary: '#lib/screens/seller/create_promotion_screen.dart',
        secondary:
            '#lib/screens/seller/create_promotion_screen.dart',
      ),
      layout: ShopLayout(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'theme': theme.toString().split('.').last,
      'name': name,
      'description': description,
      'colors': colors.toMap(),
      'layout': layout.toMap(),
      'defaultBanner': defaultBanner?.toMap(),
      'defaultMessages': defaultMessages,
      'fontFamily': fontFamily,
      'iconEmojis': iconEmojis,
      'suggestedCategories': suggestedCategories,
    };
  }
}

class ShopBanner {
  final String? imageUrl;
  final String? title;
  final String? subtitle;
  final String? buttonText;
  final String? buttonLink;
  final bool isVisible;

  ShopBanner({
    this.imageUrl,
    this.title,
    this.subtitle,
    this.buttonText,
    this.buttonLink,
    this.isVisible = true,
  });

  factory ShopBanner.fromMap(Map<String, dynamic> map) {
    return ShopBanner(
      imageUrl: map['imageUrl'],
      title: map['title'],
      subtitle: map['subtitle'],
      buttonText: map['buttonText'],
      buttonLink: map['buttonLink'],
      isVisible: map['isVisible'] ?? true,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'imageUrl': imageUrl,
      'title': title,
      'subtitle': subtitle,
      'buttonText': buttonText,
      'buttonLink': buttonLink,
      'isVisible': isVisible,
    };
  }
}

class ShopSection {
  final String id;
  final String title;
  final SectionType type;
  final List<String> productIds;
  final int order;
  final bool isVisible;
  final Map<String, dynamic> settings;

  ShopSection({
    required this.id,
    required this.title,
    required this.type,
    required this.productIds,
    required this.order,
    this.isVisible = true,
    this.settings = const {},
  });

  factory ShopSection.fromMap(Map<String, dynamic> map) {
    return ShopSection(
      id: map['id'] ?? '',
      title: map['title'] ?? '',
      type: SectionType.values.firstWhere(
        (e) => e.toString().split('.').last == map['type'],
        orElse: () => SectionType.products,
      ),
      productIds: List<String>.from(map['productIds'] ?? []),
      order: map['order'] ?? 0,
      isVisible: map['isVisible'] ?? true,
      settings: Map<String, dynamic>.from(map['settings'] ?? {}),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'type': type.toString().split('.').last,
      'productIds': productIds,
      'order': order,
      'isVisible': isVisible,
      'settings': settings,
    };
  }
}

enum SectionType {
  products,
  banner,
  carousel,
  grid,
  list,
  featured,
  newArrivals,
  bestSellers,
  categories,
}

class ShopColors {
  final String primary;
  final String secondary;
  final String accent;
  final String background;
  final String surface;
  final String text;

  ShopColors({
    this.primary = '#20C997',
    this.secondary = '#0EA5E9',
    this.accent = '#F59E0B',
    this.background = '#FFFFFF',
    this.surface = '#F8FAFB',
    this.text = '#111827',
  });

  factory ShopColors.fromMap(Map<String, dynamic> map) {
    return ShopColors(
      primary: map['primary'] ?? '#20C997',
      secondary: map['secondary'] ?? '#0EA5E9',
      accent: map['accent'] ?? '#F59E0B',
      background: map['background'] ?? '#FFFFFF',
      surface: map['surface'] ?? '#F8FAFB',
      text: map['text'] ?? '#111827',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'primary': primary,
      'secondary': secondary,
      'accent': accent,
      'background': background,
      'surface': surface,
      'text': text,
    };
  }
}

class ShopLayout {
  final int gridColumns;
  final double cardSpacing;
  final bool showPrices;
  final bool showRatings;
  final bool compactMode;
  final String headerStyle;

  ShopLayout({
    this.gridColumns = 2,
    this.cardSpacing = 8.0,
    this.showPrices = true,
    this.showRatings = true,
    this.compactMode = false,
    this.headerStyle = 'standard',
  });

  factory ShopLayout.fromMap(Map<String, dynamic> map) {
    return ShopLayout(
      gridColumns: map['gridColumns'] ?? 2,
      cardSpacing: (map['cardSpacing'] ?? 8.0).toDouble(),
      showPrices: map['showPrices'] ?? true,
      showRatings: map['showRatings'] ?? true,
      compactMode: map['compactMode'] ?? false,
      headerStyle: map['headerStyle'] ?? 'standard',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'gridColumns': gridColumns,
      'cardSpacing': cardSpacing,
      'showPrices': showPrices,
      'showRatings': showRatings,
      'compactMode': compactMode,
      'headerStyle': headerStyle,
    };
  }
}

class ShopPromotion {
  final String id;
  final String title;
  final String description;
  final String? imageUrl;
  final String? discountCode;
  final PromotionType type;
  final double? discountPercent;
  final double? discountAmount;
  final double? minimumPurchase;
  final double? maximumDiscount; // ส่วนลดสูงสุด (สำหรับ %)
  final int? buyQuantity;
  final int? getQuantity;
  final List<String>? applicableProductIds; // สินค้าที่ใช้ได้
  final List<String>? applicableCategories; // หมวดหมู่ที่ใช้ได้
  final int? usageLimit; // จำนวนครั้งที่ใช้ได้
  final int? usageLimitPerUser; // จำนวนครั้งที่ใช้ได้ต่อคน
  final int usedCount; // จำนวนครั้งที่ใช้ไปแล้ว
  final DateTime? startDate;
  final DateTime? endDate;
  final TimeOfDay? startTime; // เวลาเริ่มต้น
  final TimeOfDay? endTime; // เวลาสิ้นสุด
  final bool isActive;
  final bool isPublic; // เปิดให้ใช้งานทั่วไปหรือเฉพาะโค้ด
  final String? iconEmoji;
  final String? backgroundColor;
  final String sellerId; // ID ของผู้ขาย
  final DateTime createdAt;
  final DateTime? updatedAt;
  final String? terms; // เงื่อนไขการใช้งาน
  final Priority priority; // ความสำคัญของโปรโมชั่น

  ShopPromotion({
    required this.id,
    required this.title,
    required this.description,
    required this.type,
    required this.sellerId,
    required this.createdAt,
    this.imageUrl,
    this.discountCode,
    this.discountPercent,
    this.discountAmount,
    this.minimumPurchase,
    this.maximumDiscount,
    this.buyQuantity,
    this.getQuantity,
    this.applicableProductIds,
    this.applicableCategories,
    this.usageLimit,
    this.usageLimitPerUser,
    this.usedCount = 0,
    this.startDate,
    this.endDate,
    this.startTime,
    this.endTime,
    this.isActive = true,
    this.isPublic = true,
    this.iconEmoji,
    this.backgroundColor,
    this.updatedAt,
    this.terms,
    this.priority = Priority.normal,
  });

  factory ShopPromotion.fromMap(Map<String, dynamic> map) {
    return ShopPromotion(
      id: map['id'] ?? '',
      title: map['title'] ?? '',
      description: map['description'] ?? '',
      type: PromotionType.values.firstWhere(
        (e) => e.toString().split('.').last == map['type'],
        orElse: () => PromotionType.percentDiscount,
      ),
      sellerId: map['sellerId'] ?? '',
      createdAt: map['createdAt']?.toDate() ?? DateTime.now(),
      imageUrl: map['imageUrl'],
      discountCode: map['discountCode'],
      discountPercent: map['discountPercent']?.toDouble(),
      discountAmount: map['discountAmount']?.toDouble(),
      minimumPurchase: map['minimumPurchase']?.toDouble(),
      maximumDiscount: map['maximumDiscount']?.toDouble(),
      buyQuantity: map['buyQuantity']?.toInt(),
      getQuantity: map['getQuantity']?.toInt(),
      applicableProductIds: map['applicableProductIds'] != null
          ? List<String>.from(map['applicableProductIds'])
          : null,
      applicableCategories: map['applicableCategories'] != null
          ? List<String>.from(map['applicableCategories'])
          : null,
      usageLimit: map['usageLimit']?.toInt(),
      usageLimitPerUser: map['usageLimitPerUser']?.toInt(),
      usedCount: map['usedCount']?.toInt() ?? 0,
      startDate: map['startDate']?.toDate(),
      endDate: map['endDate']?.toDate(),
      startTime: map['startTime'] != null 
          ? TimeOfDay(hour: map['startTime']['hour'], minute: map['startTime']['minute'])
          : null,
      endTime: map['endTime'] != null 
          ? TimeOfDay(hour: map['endTime']['hour'], minute: map['endTime']['minute'])
          : null,
      isActive: map['isActive'] ?? true,
      isPublic: map['isPublic'] ?? true,
      iconEmoji: map['iconEmoji'],
      backgroundColor: map['backgroundColor'],
      updatedAt: map['updatedAt']?.toDate(),
      terms: map['terms'],
      priority: Priority.values.firstWhere(
        (e) => e.toString().split('.').last == map['priority'],
        orElse: () => Priority.normal,
      ),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'type': type.toString().split('.').last,
      'imageUrl': imageUrl,
      'discountCode': discountCode,
      'discountPercent': discountPercent,
      'discountAmount': discountAmount,
      'minimumPurchase': minimumPurchase,
      'maximumDiscount': maximumDiscount,
      'buyQuantity': buyQuantity,
      'getQuantity': getQuantity,
      'applicableProductIds': applicableProductIds,
      'applicableCategories': applicableCategories,
      'usageLimit': usageLimit,
      'usageLimitPerUser': usageLimitPerUser,
      'usedCount': usedCount,
      'startDate': startDate != null ? Timestamp.fromDate(startDate!) : null,
      'endDate': endDate != null ? Timestamp.fromDate(endDate!) : null,
      'startTime': startTime != null 
          ? {'hour': startTime!.hour, 'minute': startTime!.minute}
          : null,
      'endTime': endTime != null 
          ? {'hour': endTime!.hour, 'minute': endTime!.minute}
          : null,
      'isActive': isActive,
      'isPublic': isPublic,
      'iconEmoji': iconEmoji,
      'backgroundColor': backgroundColor,
      'sellerId': sellerId,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': updatedAt != null ? Timestamp.fromDate(updatedAt!) : null,
      'terms': terms,
      'priority': priority.toString().split('.').last,
    };
  }

  // ตรวจสอบว่าโปรโมชั่นยังใช้ได้หรือไม่
  bool get isValid {
    if (!isActive) return false;

    final now = DateTime.now();
    if (startDate != null && now.isBefore(startDate!)) return false;
    if (endDate != null && now.isAfter(endDate!)) return false;

    if (usageLimit != null && usedCount >= usageLimit!) return false;

    return true;
  }

  // ตรวจสอบเวลา
  bool get isTimeValid {
    if (startTime == null && endTime == null) return true;
    
    final now = TimeOfDay.now();
    final nowInMinutes = now.hour * 60 + now.minute;
    
    if (startTime != null) {
      final startInMinutes = startTime!.hour * 60 + startTime!.minute;
      if (nowInMinutes < startInMinutes) return false;
    }
    
    if (endTime != null) {
      final endInMinutes = endTime!.hour * 60 + endTime!.minute;
      if (nowInMinutes > endInMinutes) return false;
    }
    
    return true;
  }

  // สถานะโปรโมชั่น
  String get status {
    if (!isActive) return 'ปิดใช้งาน';
    
    final now = DateTime.now();
    if (startDate != null && now.isBefore(startDate!)) return 'กำลังจะเริ่ม';
    if (endDate != null && now.isAfter(endDate!)) return 'หมดเวลา';
    
    if (usageLimit != null && usedCount >= usageLimit!) return 'ใช้หมดแล้ว';
    
    if (!isTimeValid) return 'นอกเวลา';
    
    return 'ใช้งานได้';
  }

  // ข้อความแสดงเงื่อนไข
  String get conditionText {
    switch (type) {
      case PromotionType.percentDiscount:
        String text = 'ลด lib/screens/seller/create_promotion_screen.dart%';
        if (maximumDiscount != null) {
          text += ' (สูงสุด ฿lib/screens/seller/create_promotion_screen.dart)';
        }
        if (minimumPurchase != null) {
          text += ' ซื้อขั้นต่ำ ฿lib/screens/seller/create_promotion_screen.dart';
        }
        return text;
      case PromotionType.fixedDiscount:
        String text = 'ลด ฿lib/screens/seller/create_promotion_screen.dart';
        if (minimumPurchase != null) {
          text += ' ซื้อขั้นต่ำ ฿lib/screens/seller/create_promotion_screen.dart';
        }
        return text;
      case PromotionType.freeShipping:
        return minimumPurchase != null
            ? 'ซื้อขั้นต่ำ ฿lib/screens/seller/create_promotion_screen.dart'
            : 'ทุกคำสั่งซื้อ';
      case PromotionType.buyXGetY:
        return 'ซื้อ lib/screens/seller/create_promotion_screen.dart แถม lib/screens/seller/create_promotion_screen.dart';
      case PromotionType.flashSale:
        return 'จำกัดเวลา!';
    }
  }

  // ข้อความแสดงส่วนลด
  String get discountText {
    switch (type) {
      case PromotionType.percentDiscount:
        return 'lib/screens/seller/create_promotion_screen.dart% OFF';
      case PromotionType.fixedDiscount:
        return '฿lib/screens/seller/create_promotion_screen.dart OFF';
      case PromotionType.freeShipping:
        return 'FREE SHIP';
      case PromotionType.buyXGetY:
        return 'ซื้อ lib/screens/seller/create_promotion_screen.dart แถม lib/screens/seller/create_promotion_screen.dart';
      case PromotionType.flashSale:
        return 'FLASH SALE';
    }
  }

  // สำเนาโปรโมชั่นพร้อมการแก้ไข
  ShopPromotion copyWith({
    String? id,
    String? title,
    String? description,
    String? imageUrl,
    String? discountCode,
    PromotionType? type,
    double? discountPercent,
    double? discountAmount,
    double? minimumPurchase,
    double? maximumDiscount,
    int? buyQuantity,
    int? getQuantity,
    List<String>? applicableProductIds,
    List<String>? applicableCategories,
    int? usageLimit,
    int? usageLimitPerUser,
    int? usedCount,
    DateTime? startDate,
    DateTime? endDate,
    TimeOfDay? startTime,
    TimeOfDay? endTime,
    bool? isActive,
    bool? isPublic,
    String? iconEmoji,
    String? backgroundColor,
    String? sellerId,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? terms,
    Priority? priority,
  }) {
    return ShopPromotion(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      imageUrl: imageUrl ?? this.imageUrl,
      discountCode: discountCode ?? this.discountCode,
      type: type ?? this.type,
      discountPercent: discountPercent ?? this.discountPercent,
      discountAmount: discountAmount ?? this.discountAmount,
      minimumPurchase: minimumPurchase ?? this.minimumPurchase,
      maximumDiscount: maximumDiscount ?? this.maximumDiscount,
      buyQuantity: buyQuantity ?? this.buyQuantity,
      getQuantity: getQuantity ?? this.getQuantity,
      applicableProductIds: applicableProductIds ?? this.applicableProductIds,
      applicableCategories: applicableCategories ?? this.applicableCategories,
      usageLimit: usageLimit ?? this.usageLimit,
      usageLimitPerUser: usageLimitPerUser ?? this.usageLimitPerUser,
      usedCount: usedCount ?? this.usedCount,
      startDate: startDate ?? this.startDate,
      endDate: endDate ?? this.endDate,
      startTime: startTime ?? this.startTime,
      endTime: endTime ?? this.endTime,
      isActive: isActive ?? this.isActive,
      isPublic: isPublic ?? this.isPublic,
      iconEmoji: iconEmoji ?? this.iconEmoji,
      backgroundColor: backgroundColor ?? this.backgroundColor,
      sellerId: sellerId ?? this.sellerId,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? DateTime.now(),
      terms: terms ?? this.terms,
      priority: priority ?? this.priority,
    );
  }

  // ตรวจสอบความถูกต้องของข้อมูล
  String? validate() {
    if (title.trim().isEmpty) {
      return 'กรุณาใส่ชื่อโปรโมชั่น';
    }
    
    if (description.trim().isEmpty) {
      return 'กรุณาใส่รายละเอียดโปรโมชั่น';
    }

    switch (type) {
      case PromotionType.percentDiscount:
        if (discountPercent == null || discountPercent! <= 0 || discountPercent! > 100) {
          return 'เปอร์เซ็นต์ส่วนลดต้องอยู่ระหว่าง 1-100';
        }
        break;
      case PromotionType.fixedDiscount:
        if (discountAmount == null || discountAmount! <= 0) {
          return 'จำนวนเงินส่วนลดต้องมากกว่า 0';
        }
        break;
      case PromotionType.buyXGetY:
        if (buyQuantity == null || buyQuantity! <= 0) {
          return 'จำนวนสินค้าที่ซื้อต้องมากกว่า 0';
        }
        if (getQuantity == null || getQuantity! <= 0) {
          return 'จำนวนสินค้าที่แถมต้องมากกว่า 0';
        }
        break;
      default:
        break;
    }

    if (startDate != null && endDate != null && startDate!.isAfter(endDate!)) {
      return 'วันเริ่มต้นต้องก่อนวันสิ้นสุด';
    }

    if (startTime != null && endTime != null) {
      final startMinutes = startTime!.hour * 60 + startTime!.minute;
      final endMinutes = endTime!.hour * 60 + endTime!.minute;
      if (startMinutes >= endMinutes) {
        return 'เวลาเริ่มต้นต้องก่อนเวลาสิ้นสุด';
      }
    }

    if (minimumPurchase != null && minimumPurchase! < 0) {
      return 'ยอดซื้อขั้นต่ำต้องมากกว่าหรือเท่ากับ 0';
    }

    if (usageLimit != null && usageLimit! <= 0) {
      return 'จำนวนการใช้งานต้องมากกว่า 0';
    }

    if (usageLimitPerUser != null && usageLimitPerUser! <= 0) {
      return 'จำนวนการใช้งานต่อคนต้องมากกว่า 0';
    }

    return null; // ไม่มีข้อผิดพลาด
  }
}

enum PromotionType {
  percentDiscount, // ส่วนลดเปอร์เซ็นต์
  fixedDiscount, // ส่วนลดจำนวนเงิน
  freeShipping, // ฟรีค่าจัดส่ง
  buyXGetY, // ซื้อ X แถม Y
  flashSale, // Flash Sale
}

enum Priority {
  low,
  normal,
  high,
  urgent,
}
