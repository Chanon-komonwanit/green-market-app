// lib/main_app_shell.dart
// ignore_for_file: unused_field

import 'package:flutter/material.dart';
import 'package:green_market/models/app_user.dart';
import 'package:green_market/providers/auth_provider.dart';
import 'package:green_market/providers/user_provider.dart';
import 'package:green_market/providers/app_config_provider.dart';
import 'package:green_market/screens/admin_panel_screen.dart';
import 'package:green_market/screens/home_screen_beautiful.dart'; // ‡πÉ‡∏ä‡πâ home_screen_beautiful.dart
import 'package:green_market/screens/cart_screen.dart';
import 'package:green_market/screens/orders_screen.dart';
import 'package:green_market/screens/simple_chat_list_screen.dart';
import 'package:green_market/screens/profile_screen.dart';
import 'package:green_market/screens/green_world_hub_screen.dart';
import 'package:green_market/screens/seller/seller_dashboard_screen.dart';
import 'package:green_market/utils/constants.dart';
import 'package:provider/provider.dart';
import 'package:green_market/screens/notifications_center_screen.dart';
import 'package:green_market/services/notification_service.dart';

class MainAppShell extends StatefulWidget {
  const MainAppShell({super.key});

  @override
  State<MainAppShell> createState() => _MainAppShellState();
}

class _MainAppShellState extends State<MainAppShell> {
  int _selectedIndex = 0;

  void _onItemTapped(int index) {
    final navItems = _getAllNavItems();
    if (index < navItems.length) {
      setState(() {
        _selectedIndex = index;
      });
    }
  }

  // --- Page Lists - Now unified with dynamic tabs based on role ---
  List<Widget> _getAllPages() {
    final userProvider =
        context.read<UserProvider>(); // ‡πÉ‡∏ä‡πâ read ‡πÅ‡∏ó‡∏ô listen: false

    List<Widget> pages = [
      const HomeScreen(), // 0. ‡∏ï‡∏•‡∏≤‡∏î (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô) - ‡∏à‡∏≤‡∏Å home_screen_beautiful.dart
      const CartScreen(), // 1. ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)
      const OrdersScreen(), // 2. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)
      const SimpleChatListScreen(), // 3. ‡πÅ‡∏ä‡∏ó (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)
      const ProfileScreen(), // 4. ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)
    ];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
    if (userProvider.isSeller) {
      pages.add(const SellerDashboardScreen()); // 5. ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (userProvider.isAdmin) {
      pages.add(const AdminPanelScreen()); // 5 ‡∏´‡∏£‡∏∑‡∏≠ 6. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö
    }

    return pages;
  }

  // --- AppBar Titles - Now unified with dynamic titles based on role ---
  List<String> _getAllTitles() {
    final userProvider = Provider.of<UserProvider>(context, listen: false);

    List<String> titles = [
      '‡∏ï‡∏•‡∏≤‡∏î',
      '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
      '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
      '‡πÅ‡∏ä‡∏ó',
      'üè° My Home',
    ];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
    if (userProvider.isSeller) {
      titles.add('‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (userProvider.isAdmin) {
      titles.add('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö');
    }

    return titles;
  }

  // --- Bottom Navigation Bar Items - Now unified with dynamic items based on role ---
  static const List<BottomNavigationBarItem> _baseNavItems = [
    BottomNavigationBarItem(
        icon: Icon(Icons.store_outlined),
        activeIcon: Icon(Icons.store),
        label: '‡∏ï‡∏•‡∏≤‡∏î'),
    BottomNavigationBarItem(
        icon: Icon(Icons.shopping_cart_outlined),
        activeIcon: Icon(Icons.shopping_cart),
        label: '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤'),
    BottomNavigationBarItem(
        icon: Icon(Icons.receipt_long_outlined),
        activeIcon: Icon(Icons.receipt_long),
        label: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'),
    BottomNavigationBarItem(
        icon: Icon(Icons.chat_bubble_outline),
        activeIcon: Icon(Icons.chat_bubble),
        label: '‡πÅ‡∏ä‡∏ó'),
    BottomNavigationBarItem(
        icon: Icon(Icons.home_outlined),
        activeIcon: Icon(Icons.home),
        label: 'My Home'),
  ];

  List<BottomNavigationBarItem> _getAllNavItems() {
    final userProvider = Provider.of<UserProvider>(context, listen: false);

    List<BottomNavigationBarItem> items = _baseNavItems.toList();

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
    if (userProvider.isSeller) {
      items.add(const BottomNavigationBarItem(
          icon: Icon(Icons.storefront_outlined),
          activeIcon: Icon(Icons.storefront),
          label: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤'));
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (userProvider.isAdmin) {
      items.add(const BottomNavigationBarItem(
          icon: Icon(Icons.admin_panel_settings_outlined),
          activeIcon: Icon(Icons.admin_panel_settings),
          label: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£'));
    }

    return items;
  }

  @override
  Widget build(BuildContext context) {
    final pages = _getAllPages();
    final navItems = _getAllNavItems();
    final titles = _getAllTitles();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö index ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (_selectedIndex >= pages.length) {
      _selectedIndex = 0;
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(
          titles[_selectedIndex],
          style: Theme.of(context).textTheme.titleLarge?.copyWith(
                color: Theme.of(context).colorScheme.onPrimary,
                fontSize: 20, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô baseFontSize
              ),
        ),
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Colors.white,
        actions: [
          // Notification icon with badge
          Consumer<UserProvider>(
            builder: (context, userProvider, child) {
              final userId = userProvider.currentUser?.id;
              if (userId == null) return const SizedBox.shrink();

              return StreamBuilder<int>(
                stream: NotificationService().getUnreadCountStream(userId),
                builder: (context, snapshot) {
                  final unreadCount = snapshot.data ?? 0;
                  return Stack(
                    children: [
                      IconButton(
                        icon: const Icon(Icons.notifications_outlined),
                        onPressed: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) =>
                                  const NotificationsCenterScreen(),
                            ),
                          );
                        },
                      ),
                      if (unreadCount > 0)
                        Positioned(
                          right: 6,
                          top: 6,
                          child: Container(
                            padding: const EdgeInsets.all(2),
                            decoration: BoxDecoration(
                              color: Colors.red,
                              borderRadius: BorderRadius.circular(8),
                            ),
                            constraints: const BoxConstraints(
                              minWidth: 16,
                              minHeight: 16,
                            ),
                            child: Text(
                              unreadCount > 99 ? '99+' : unreadCount.toString(),
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 10,
                                fontWeight: FontWeight.bold,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ),
                    ],
                  );
                },
              );
            },
          ),
        ],
      ),
      body: pages[_selectedIndex], // ‡πÉ‡∏ä‡πâ pages array ‡πÅ‡∏ó‡∏ô _getSelectedScreene(
      bottomNavigationBar: BottomNavigationBar(
        items: navItems,
        currentIndex: _selectedIndex,
        selectedItemColor: Theme.of(context).colorScheme.primary,
        unselectedItemColor: Theme.of(context).colorScheme.onSurfaceVariant,
        onTap: _onItemTapped,
        type: BottomNavigationBarType.fixed,
        showUnselectedLabels: true,
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const GreenWorldHubScreen(),
            ),
          );
        },
        backgroundColor: Colors.green,
        foregroundColor: Colors.white,
        tooltip: '‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏•‡∏Å‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',
        child: const Icon(Icons.eco), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏•‡πá‡∏Å
      ),
    );
  }
}
