#!/usr/bin/env dart

/// Green Market - Dependency Management Script
/// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ dependencies ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
///
/// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
/// ```bash
/// dart run scripts/manage_dependencies.dart [command]
/// ```
///
/// Commands:
/// - check: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏¢
/// - update: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dependencies ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
/// - audit: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
/// - clean: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î cache

import 'dart:io';

void main(List<String> args) async {
  final command = args.isNotEmpty ? args[0] : 'help';

  print('üå± Green Market - Dependency Manager');
  print('‚ïê' * 50);

  switch (command) {
    case 'check':
      await checkOutdated();
      break;
    case 'update':
      await updateDependencies();
      break;
    case 'audit':
      await auditSecurity();
      break;
    case 'clean':
      await cleanProject();
      break;
    case 'help':
    default:
      showHelp();
      break;
  }
}

Future<void> checkOutdated() async {
  print('üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏¢...\n');

  try {
    final result = await Process.run('flutter', ['pub', 'outdated'],
        workingDirectory: Directory.current.path);
    print(result.stdout);

    if (result.stderr.toString().isNotEmpty) {
      print('‚ùå Error: ${result.stderr}');
    }
  } catch (e) {
    print('‚ùå Error running flutter command: $e');
    print('üí° Make sure Flutter is installed and in your PATH');
  }
}

Future<void> updateDependencies() async {
  print('üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dependencies...\n');

  try {
    // Step 1: Clean first
    print('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô...');
    await Process.run('flutter', ['clean'],
        workingDirectory: Directory.current.path);

    // Step 2: Get dependencies
    print('üì¶ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î dependencies...');
    final result = await Process.run('flutter', ['pub', 'get'],
        workingDirectory: Directory.current.path);
    print(result.stdout);

    // Step 3: Upgrade if possible
    print('‚¨ÜÔ∏è ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î dependencies ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...');
    final upgradeResult = await Process.run('flutter', ['pub', 'upgrade'],
        workingDirectory: Directory.current.path);
    print(upgradeResult.stdout);

    if (result.exitCode == 0) {
      print('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    } else {
      print('‚ùå ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${result.stderr}');
    }
  } catch (e) {
    print('‚ùå Error: $e');
  }
}

Future<void> auditSecurity() async {
  print('üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...\n');

  // Check for known vulnerabilities
  print('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö...');
  final result = await Process.run('flutter', ['pub', 'deps']);

  if (result.stdout.toString().contains('vulnerabilities')) {
    print('‚ö†Ô∏è ‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢!');
    print(result.stdout);
  } else {
    print('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢');
  }

  // Check for deprecated packages
  print('\nüìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö packages ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß...');
  final outdatedResult = await Process.run('flutter', ['pub', 'outdated']);
  final output = outdatedResult.stdout.toString();

  if (output.contains('discontinued')) {
    print('‚ö†Ô∏è ‡∏û‡∏ö packages ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß:');
    final lines = output.split('\n');
    for (final line in lines) {
      if (line.contains('discontinued')) {
        print('  - $line');
      }
    }
  } else {
    print('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö packages ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß');
  }
}

Future<void> cleanProject() async {
  print('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ...\n');

  final commands = [
    ['flutter', 'clean'],
    ['flutter', 'pub', 'cache', 'clean'],
    ['flutter', 'pub', 'get'],
  ];

  for (final command in commands) {
    print('‚ö° ‡∏£‡∏±‡∏ô: ${command.join(' ')}');
    final result = await Process.run(command[0], command.skip(1).toList());

    if (result.exitCode != 0) {
      print('‚ùå Error: ${result.stderr}');
      return;
    }
  }

  print('‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

void showHelp() {
  print('''
üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:

  check   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏¢
  update  - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dependencies ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢  
  audit   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
  clean   - ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î cache ‡πÅ‡∏•‡∏∞ build files
  help    - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡∏µ‡πâ

üìñ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
  dart run scripts/manage_dependencies.dart check
  dart run scripts/manage_dependencies.dart update

üîß ‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
  - ‡∏£‡∏±‡∏ô 'check' ‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
  - ‡∏£‡∏±‡∏ô 'audit' ‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  - ‡∏£‡∏±‡∏ô 'clean' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ build
  - ‡∏£‡∏±‡∏ô 'update' ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß

‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:
  - ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô update
  - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á update ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  - ‡∏≠‡πà‡∏≤‡∏ô changelog ‡∏Ç‡∏≠‡∏á packages
''');
}
